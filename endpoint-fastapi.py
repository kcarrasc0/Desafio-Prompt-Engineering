#Quest√£o 4: Endpoint FastAPI com valida√ß√£o e UUID
#üéØ Objetivo: C√≥digo em Python com valida√ß√£o e gera√ß√£o din√¢mica de campo.
#üß† Prompt:
#Crie um endpoint em FastAPI chamado /item que receba um objeto JSON do tipo Item contendo os campos:

#nome (string, m√°x. 25 caracteres),

#valor (float),

#data (date, n√£o pode ser maior que a data atual).
#O endpoint deve validar os dados e retornar o mesmo objeto com um campo adicional chamado uuid (identificador √∫nico gerado dinamicamente). O c√≥digo deve estar funcional e conter coment√°rios explicando cada parte.


#RESPOSTA:

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, validator, ValidationError
from uuid import uuid4
from datetime import date

# Inicializando a aplica√ß√£o FastAPI
app = FastAPI()

# Definindo o modelo Item que ser√° utilizado para validar os dados
class Item(BaseModel):
    nome: str  # Nome do item (m√°ximo de 25 caracteres)
    valor: float  # Valor do item (do tipo float)
    data: date  # Data de cria√ß√£o do item (do tipo date)

    # Valida√ß√£o do campo 'nome' para garantir que n√£o ultrapasse 25 caracteres
    @validator('nome')
    def nome_max_length(cls, v):
        if len(v) > 25:
            raise ValueError('O nome n√£o pode ter mais de 25 caracteres')
        return v

    # Valida√ß√£o do campo 'data' para garantir que n√£o seja maior que a data atual
    @validator('data')
    def data_maxima(cls, v):
        if v > date.today():
            raise ValueError('A data n√£o pode ser maior que a data atual')
        return v

    # Gerando o 'uuid' dinamicamente no momento de resposta
    def generate_uuid(self):
        return str(uuid4())

# Criando o endpoint /item
@app.post("/item")
async def create_item(item: Item):
    try:
        # Aqui, geramos o UUID e retornamos o objeto Item com o campo adicional 'uuid'
        item_dict = item.dict()  # Convertendo o objeto 'Item' para dicion√°rio
        item_dict['uuid'] = item.generate_uuid()  # Adicionando o campo 'uuid'
        return item_dict  # Retornando o dicion√°rio com o UUID gerado

    except ValidationError as e:
        # Caso haja erro na valida√ß√£o dos dados de entrada, retornamos uma mensagem de erro
        raise HTTPException(status_code=400, detail=str(e))

# Instru√ß√£o para rodar o servidor localmente:
# No terminal, execute: uvicorn <nome_do_arquivo>:app --reload


#Explica√ß√£o do C√≥digo:
#FastAPI e Pydantic: A biblioteca FastAPI √© usada para criar o servidor e o endpoint, enquanto o Pydantic √© utilizado para validar os dados de entrada. O modelo Item √© definido com o uso de Pydantic, que permite a valida√ß√£o de tipos de dados e a cria√ß√£o de validadores personalizados.

#Valida√ß√£o do Nome: O campo nome √© validado para garantir que o tamanho n√£o ultrapasse 25 caracteres. Caso contr√°rio, √© levantado um erro com uma mensagem apropriada.

#Valida√ß√£o da Data: O campo data √© validado para garantir que n√£o seja maior que a data atual. Caso a data fornecida seja futura, um erro ser√° gerado.

#UUID Din√¢mico: O campo uuid √© gerado dinamicamente usando a fun√ß√£o uuid4() da biblioteca uuid e adicionado ao dicion√°rio de resposta antes de retorn√°-lo.

#Endpoint /item: O endpoint recebe um objeto JSON que corresponde ao modelo Item, realiza as valida√ß√µes e, se tudo estiver correto, retorna o objeto com o campo adicional uuid. Se ocorrer qualquer erro de valida√ß√£o, uma exce√ß√£o HTTPException √© gerada com o status 400 e a descri√ß√£o do erro.


#Testando a API:
#Para rodar este c√≥digo, salve-o em um arquivo, por exemplo, main.py, e execute o servidor FastAPI com o comando:

#uvicorn main:app --reload
#Agora, voc√™ pode acessar o endpoint atrav√©s de http://127.0.0.1:8000/item e testar com requisi√ß√µes POST enviando um JSON v√°lido, como este exemplo:

#{
#  "nome": "Produto Exemplo",
#  "valor": 100.5,
#  "data": "2025-05-12"
#}
#A resposta seria algo como:

#{
#  "nome": "Produto Exemplo",
#  "valor": 100.5,
#  "data": "2025-05-12",
#  "uuid": "f742dcb5-0f2d-4a9a-87ea-3e9f9cb16743"
#}